<?php

namespace Cmar\MeetingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Cmar\MeetingBundle\Entity\User;
use Cmar\MeetingBundle\Entity\Meeting;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * MeetingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeetingRepository extends EntityRepository
{
    /*public function findByStateAndUser($state, User $user)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.owner = :user 
                           AND m.state = :state 
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->setParameter('state', $state)
            ->getResult();
      
            }*/

    public function findByUserAndStatesOrderByRank(User $user, $states)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m
                           LEFT JOIN m.nicknames n
                           WHERE n.user = :user
                           AND m.state IN (:states)
                           ORDER BY n.rank ASC")
            ->setParameter('user', $user)
            ->setParameter('states', $states)
            ->getResult();

    }


    public function findOneByStateAndTitle($state, $title)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.title = :title
                           AND m.state = :state
                           ORDER BY m.date DESC")
            ->setParameter('title', $title)
            ->setParameter('state', $state)
            ->getSingleResult();
      
    }

    public function findOneByStatesAndTitle($states, $title)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.title = :title
                           AND m.state IN (:states)
                           ORDER BY m.date DESC")
            ->setParameter('title', $title)
            ->setParameter('states', $states)
            ->getSingleResult();
      
    }

    public function findByStateAndUser($state, User $user)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           LEFT JOIN m.users u
                           WHERE (u = :user
                           OR m.owner = :user)
                           AND m.state = :state
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->setParameter('state', $state)
            ->getResult();
      
    }

    public function findByStatesAndUser(array $states, User $user)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           LEFT JOIN m.users u
                           WHERE (u = :user
                           OR m.owner = :user) 
                           AND m.state IN (:states) 
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->setParameter('states', $states)
            ->getResult();
      
    }

    public function findByStateAndGroup($state, Group $group)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.state = :state
                           AND m.group = :group
                           ORDER BY m.date DESC")
            ->setParameter('state', $state)
            ->setParameter('group', $group)
            ->getResult();
        
    }

    public function findOneByStateAndGroup($state, Group $group)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.state = :state
                           AND m.group = :group
                           ORDER BY m.date DESC")
            ->setParameter('state', $state)
            ->setParameter('group', $group)
            ->getSingleResult();
        
    }

    public function findByStateUserAndNotGroup($state, $user)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.state = :state
                           AND m.salt = :salt")
            ->setParameter('state', $state)
            ->setParameter('salt', $user->getLogin())
            ->getResult();
      
    }

    public function findByStatesAndUserGroup(array $states, User $user, $group)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.owner = :user 
                           AND m.state IN (:states)
                           AND m.group = :group
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->setParameter('group', $group)
            ->setParameter('states', $states)
            ->getResult();
        
    }

    public function findByStatesUserAndMonth(array $states, User $user, $month)
    {
        $interval = new \DateInterval("P1M");                                                                                                                                                                                        
        $monthmore = clone $month;
        $monthmore->add($interval);//Sumamos un mes a la fecha  

        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.owner = :user 
                           AND m.state IN (:states)
                           AND m.date > :month
                           AND m.date < :monthmore
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->setParameter('states', $states)
            ->setParameter('month', $month)
            ->setParameter('monthmore', $monthmore)
            ->getResult();      
    }

    public function findByStatesUserAndMonthGroup(array $states, User $user, $group, $month)
    {
        $interval = new \DateInterval("P1M");                                                                                                                                                                                        
        $monthmore = clone $month;
        $monthmore->add($interval);//Sumamos un mes a la fecha  

        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.owner = :user
                           AND m.group = :group
                           AND m.state IN (:states)
                           AND m.date > :month
                           AND m.date < :monthmore
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->setParameter('states', $states)
            ->setParameter('month', $month)
            ->setParameter('monthmore', $monthmore)
            ->setParameter('group', $group)
            ->getResult();
        
    }

    public function findMonthsAndRecordings($states, $user)
    {
        $inQuery = implode(',', array_fill(0, count($states), '?'));
        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare('select DATE_FORMAT(m.date, "%Y-%m") AS MES,
                       COUNT(distinct(m.id)) AS NUMMEETING,
                       COUNT(r.id) as NUMRECORD 
                       FROM meeting as m LEFT JOIN recording AS r ON r.meeting_id = m.id 
                       WHERE m.owner_id = ?
                       AND m.state IN (' . $inQuery . ')
                       GROUP BY mes');
        $stmt->bindValue(1, $user->getId());
        foreach ($states as $k => $state) $stmt->bindValue(($k+2), $state);

        $stmt->execute();

        return $stmt->fetchAll();

        /*$rsm = new ResultSetMapping;
        $rsm->addEntityResult('CmarMeetingBundle:Meeting', 'm');
        $rsm->addFieldResult('m', 'date', 'date');
        $rsm->addFieldResult('m', 'id', 'id');

        return $this->getEntityManager()
            ->createNativeQuery("SELECT id from meeting", $rsm)
            //->setParameter('user', $user)
            //->setParameter('states', $states)
            //->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            ->getResult();*/
      
    }

   public function findMonthsAndRecordingsGroup($user, $group)
    {
        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare('select DATE_FORMAT(m.date, "%Y-%m") AS MES,
                       COUNT(m.id) AS NUMMEETING,
                       COUNT(r.id) as NUMRECORD 
                       FROM meeting as m LEFT JOIN recording AS r ON r.meeting_id = m.id 
                       WHERE m.owner_id = :user
                       AND m.group_id = :group
                       GROUP BY mes');
        $stmt->bindValue('user', $user->getId());
        $stmt->bindValue('group', $group->getId());
        $stmt->execute();
        return $stmt->fetchAll();
      
    }


   public function findMonthsByUser(User $user)
    {
        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare('select DATE_FORMAT(m.date, "%Y-%m") AS MES,
                       COUNT(m.id) AS NUM
                       FROM  meeting AS m
                       WHERE m.owner_id = :user
                       GROUP BY mes');
        $stmt->bindValue('user', $user->getId());
        $stmt->execute();
        return $stmt->fetchAll();
      
    }

    public function findByStateAndNotUser($state, User $user)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.owner != :user 
                           AND m.state = :state 
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->setParameter('state', $state)
            ->getResult();
      
    }


    public function findStarted()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.date <= CURRENT_TIMESTAMP() 
                           AND m.state = :state")
            ->setParameter('state', Meeting::STATE_SCHEDULED)
            ->getResult();
    }

    public function findFutureByOwner(User $user)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.owner = :user 
                           AND m.date >= CURRENT_TIMESTAMP() 
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->getResult();
    }

    public function findHistoricalByUser(User $user)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                           WHERE m.owner = :user 
                           AND m.date < CURRENT_TIMESTAMP() 
                           ORDER BY m.date DESC")
            ->setParameter('user', $user)
            ->getResult();
    }
    
    public function findOneBySaltOrSecretSalt($salt, $boolsalt = true)
    {
        if ($boolsalt) {
            return $this->getEntityManager()
                ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                               WHERE m.salt = :salt
                               AND m.state =:state")
                ->setParameter('salt', $salt)
                ->setParameter('state', Meeting::STATE_NOW)
                ->getSingleResult();
        } else {
            return $this->getEntityManager()
                ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m
                               WHERE m.secretsalt = :salt
                               AND m.state =:state")
                ->setParameter('salt', $salt)
                ->setParameter('state', Meeting::STATE_NOW)
                ->getSingleResult();
        }      
    }

    public function findOneByViewSalt($salt)
    {

        return $this->getEntityManager()
            ->createQuery("SELECT m FROM CmarMeetingBundle:Meeting m 
                               WHERE m.viewsalt = :salt
                               AND m.state =:state")
            ->setParameter('salt', $salt)
            ->setParameter('state', Meeting::STATE_NOW)
            ->getSingleResult();   
    }
    
}