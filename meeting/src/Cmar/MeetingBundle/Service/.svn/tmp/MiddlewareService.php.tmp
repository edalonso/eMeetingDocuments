<?php

namespace Cmar\MeetingBundle\Service;

use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\Validator\ValidatorInterface;
use Symfony\Component\HttpKernel\Log\LoggerInterface;

use Symfony\Component\HttpFoundation\Response;

use Cmar\MeetingBundle\Entity\Meeting;
use Cmar\MeetingBundle\Entity\User;
use Cmar\MeetingBundle\Entity\Recording;
use Cmar\MeetingBundle\Entity\Group;
                                                                                                                                             

class MiddlewareService
{
    private $doctrine;
    private $adoAdmin;
    private $validator;
    private $logger;

    public function __construct(RegistryInterface $doctrine, AdoAdminInterface $adoAdmin, ValidatorInterface $validator, LoggerInterface $logger = null) 
    {
        $this->logger = $logger;
        $this->doctrine = $doctrine;
        $this->validator = $validator;
        $this->adoAdmin = $adoAdmin;
    }

    public function createUser($in)
    {
        $em = $this->doctrine->getEntityManager();

        $user = new User();
        $this->mapUser($user, $in);

        $errors = $this->validator->validate($user);
        if (count($errors) > 0) {
            throw new \LogicException("Validation Exception \"" . $errors[0]->getPropertyPath() . "\": " . $errors[0]->getMessageTemplate(), -1);
        } 

        //No carga en la base de datos, suelta el error DDBB Exception             
        $em->persist($user);
        try {
            $em->flush();
        } catch (\Exception $e) {
            $this->logger->info("DDBB Exception"); 
            throw new \LogicException("DDBB Exception", -1);
        }

        try {
            $sal = $this->adoAdmin->principalUpdate($user->getLogin(), $user->getEmail(), $user->getPassword(),
                                                    $user->getName(), $user->getSurname(), "Automatically created user in meeting");  
        } catch (\Exception $e) {
            $this->logger->info("User does not created"); 
            throw new \LogicException("User do not created", -1);
        }

        /*
          $sal = $this->adoAdmin->principalUpdate($user->getLogin(), $user->getEmail(), $user->getPassword(), 
                                       $user->getName(), $user->getSurname(), "Automatically created user in meeting");
        */
    }
    
    public function updateUser($old, $new)
    {
        $em = $this->doctrine->getEntityManager();
        $user = $em->getRepository('CmarMeetingBundle:User')->findOneBy(array('login' => $old->{'login'}));
       
        if (!$user) {
            throw new \LogicException("No User in DDBB", -1);
        }        

        $this->mapUser($user, $new);
        
        $errors = $this->validator->validate($user);
        if (count($errors) > 0) {
            throw new \LogicException("Validation Exception \"" . $errors[0]->getPropertyPath() . "\": " . $errors[0]->getMessageTemplate(), -1);
        } 

        $em->persist($user);
        
        try {
            $em->flush();
        } catch (\Exception $e) {
            $this->logger->info("DDBB Exception"); 
            throw new \LogicException("DDBB Exception", -1);
        }
        var_dump($in->{'Login'});exit;
        try {
            $id_user = $this->adoAdmin->principalFindByEmail($user->getEmail());
            //$sal = $this->adoAdmin->principalUpdate($in->{'Login'}, $in-{'Email'}, $in->{'Password'}, $user->{'Name'}, $in->{'Surname1'} $in->{'Surname2'});  
        } catch (\Exception $e) {
            $this->logger->info("User does not updated"); 
            throw new \LogicException("User does not updated", -1);
        }

    }
    
    
    public function deleteUser($in)
    {
        $em = $this->doctrine->getEntityManager();
        $user = $em->getRepository('CmarMeetingBundle:User')->findOneBy(array('login'=> $in->{'login'}));
        if (!$user) {
            $this->logger->info("User does not exist"); 
            throw new \LogicException("User does not exist");
        } else {
            $id_user = $this->adoAdmin->principalFindByEmail($user->getEmail());
            $xml = $this->adoAdmin->principalDelete($id_user);
            $em->remove($user);
            $em->flush();
        }
    }
    
    
    public function createGroup($in)
    {
        $em = $this->doctrine->getEntityManager();
        
        $group = new Group();
        $this->mapGroup($group, $in);
        
        $errors = $this->validator->validate($group);
        if (count($errors) > 0) {
            throw new \LogicException("Validation Exception \"" . $errors[0]->getPropertyPath() . "\": " . $errors[0]->getMessageTemplate(), -1);
        } 

        $em->persist($group);
        
        try {
            $em->flush();
        } catch (\Exception $e) {
            $this->logger->info("DDBB Exception"); 
            throw new \LogicException("DDBB Exception", -1);
        }
    }
    
    public function updateGroup($old, $new)
    {
        $em = $this->doctrine->getEntityManager();
        $group = $em->getRepository('CmarMeetingBundle:Group')->findOneBy(array('name' => $old->{'name'}));
        
        if (!$group) {
            throw new \LogicException("No Group in DDBB", -1);
        }    
            
        $this->mapGroup($group, $new);
        
        $errors = $this->validator->validate($group);
        if (count($errors) > 0) {
            throw new \LogicException("Validation Exception \"" . $errors[0]->getPropertyPath() . "\": " . $errors[0]->getMessageTemplate(), -1);
        } 

        $em->persist($group);
        
        try {
            $em->flush();
        } catch (\Exception $e) {
            $this->logger->info("DDBB Exception"); 
            throw new \LogicException("DDBB Exception", -1);
        }
    }
    
    
    public function deleteGroup($in)
    {
        $em = $this->doctrine->getEntityManager();
        $group = $em->getRepository('CmarMeetingBundle:Group')->findOneBy(array('name' => $in->{'name'}));
        
        if (!$group) {
            $this->logger->info("Group does not exist"); 
            throw new \LogicException("Group does not exist");
        } else {
            $em->remove($group);
            $em->flush();
        }
    }
        
    
    public function leaveGroup($u_in, $g_in)
    {
        $em = $this->doctrine->getEntityManager();
        $group = $em->getRepository('CmarMeetingBundle:Group')->findOneBy(array('name' => $g_in->{'name'}));
        $user = $em->getRepository('CmarMeetingBundle:User')->findOneBy(array('login' => $u_in->{'login'}));
        
        if (!$group) {
            $this->logger->info("Group does not exist"); 
            throw new \LogicException("Group does not exist");
        } elseif (!$user) {
            $this->logger->info("User does not exist"); 
            throw new \LogicException("User does not exist");
        } else {
            $user->removeGroup($group);

            $em->persist($user);
            try {
                $em->flush();
            } catch (\Exception $e) {
                $this->logger->info("DDBB Exception"); 
                throw new \LogicException("DDBB Exception", -1);
            }
        }
    }
    
    
    
    public function joinGroup($u_in, $g_in)
    {
        $em = $this->doctrine->getEntityManager();
        $group = $em->getRepository('CmarMeetingBundle:Group')->findOneBy(array('name' => $g_in->{'name'}));
        $user = $em->getRepository('CmarMeetingBundle:User')->findOneBy(array('login' => $u_in->{'login'}));
        
        if (!$group) {
            throw new \LogicException("Group does not exist");
        } elseif (!$user) {
            throw new \LogicException("User does not exist");
        } else {
            $user->addGroup($group);
            
            $em->persist($user);
            try {
                $em->flush();
            } catch (\Exception $e) {
            $this->logger->info("DDBB Exception"); 
                throw new \LogicException("DDBB Exception", -1);
            }
        }
    }
    
    
    
    
    private function mapUser($user, $data)
    {
        if (isset($data->{'login'}))
            $user->setLogin($data->{'login'});
        if (isset($data->{'password'}))
            $user->setPassword($data->{'password'});
        if (isset($data->{'name'}))
            $user->setName($data->{'name'});
        if (isset($data->{'surname1'})){
            $user->setSurname($data->{'surname1'});
        } elseif (isset($data->{'surname1'})) {
                $user->setSurname($data->{'surname1'});
        }
        /*if (isset($data->{'surname2'}))
          $user->setSurname2($data->{'surname2'});*/
        if (isset($data->{'mail'}))
            $user->setEmail($data->{'mail'});
        /*if (isset($data->{'phoneNumber'}))
            $user->setPhoneNumber($data->{'phoneNumber'});
        if (isset($data->{'url'}))
            $user->setUrl($data->{'url'});
        if (isset($data->{'type'}))
            $user->setType($data->{'type'});
        if (isset($data->{'photo'}))
            $user->setPhoto($data->{'photo'});
        if (isset($data->{'organization'}))
            $user->setOrganization($data->{'organization'});
        if (isset($data->{'mentor'}))
        $user->setMentor($data->{'mentor'});*/
        
        return $user;
    }
    
    
    private function mapGroup($group, $data)
    {
        if (isset($data->{'name'}))
            $group->setName($data->{'name'});
        if (isset($data->{'description'}))
            $group->setDescription($data->{'description'});
        if (isset($data->{'type'}))
            $group->setType($data->{'type'});
        
        return $group;
    }

}

